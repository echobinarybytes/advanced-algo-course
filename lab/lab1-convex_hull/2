#include "convex_hull_solver.h"
#include <iostream>
#include <fstream>
#include "point_triangle_vec.h"


ConvexHullSolver::ConvexHullSolver(Data& d) {
    point_set_name = d.GetInFileName();
    res_set_name = d.GetOutFileName();
    std::ifstream ifd(point_set_name, std::fstream::in);

    double x, y;
    while (ifd >> x >> y) {
        point_set.push_back(std::make_pair(x, y));
    }
    ifd.close();
}

ConvexHullSolver::~ConvexHullSolver() {

}

// 基于枚举的凸包求解算法
void ConvexHullSolver::SolverBasedEnum() {
    for (auto point : point_set) {
        convex_hull_set.insert(point);
    }

    int point_cnt = point_set.size();
    // 选择某三个点构成三角形A, B, C
    for (int i = 0; i < point_cnt; ++ i) { // A
        Point A(point_set[i].first, point_set[i].second);

        for (int j = i + 1; j < point_cnt; ++ j) {// B
            Point B(point_set[j].first, point_set[j].second);

            for (int k = j + 1; k < point_cnt; ++ k) {// C
                Point C(point_set[k].first, point_set[k].second);

                // 选择某个点P, 判断点P是否在凸包的顶点集合中, 如果不再，则在集合中删除这个点
                for (int l = k + 1; l < point_cnt; ++ l) {// P
                    Point P(point_set[l].first, point_set[l].second);
                    Triangle tri(A, B, C);
                    // 判断点P是否在triangle中或者在某条边上
                    if (PointInTriangle(tri, P)) {
                        convex_hull_set.erase(point_set[l]);
                    }


                } // end for (l) 
            }// end for (k)
        } // end for (j)
    } // end for (i)
}

#include <cmath> // atan2(double x, double y)
// 基于Graham-Scan的凸包求解算法
void ConvexHullSolver::SolverBasedGrahamScan() {
    // 1. 求p_0_idx，y的坐标最小
    int p_0_idx = FindP0Index(point_set);

    convex_hull_set.clear(); // 清空之前的计算结果
    convex_hull_set.insert(point_set[p_0_idx]); // 插入p0
    // 除去最小坐标的点集
    std::vector<std::pair<double, double>> GS_point_set;
    for (int i = 0; i < point_set.size(); ++ i) {
        if (i != p_0_idx)
            GS_point_set.push_back(point);
    }
    // 2. 按照与p0的级角大小排序
    sort(GS_point_set.begin(), GS_point_set.end(), 
            [](const std::pair<double, double>& a, const std::pair<double, double>& b) {
                // 计算极角

                (a.first, a.second)
                (b.first, b.second)

            } );


    

}

// 基于分治思想的凸包求解算法
void ConvexHullSolver::SolverBasedDAndQ() {

}

// 保存到文件中
void ConvexHullSolver::SaveConvexHullSet(const std::string& store_file_name) {
    std::ofstream ofd(store_file_name, std::fstream::out);
    for (auto point : convex_hull_set) {
        ofd << point.first << " " << point.second << "\n";
    }

    ofd.close();
}
